c(1, 2, 3, 4) %in% c(3, 4, 5)
deck2$face == "ace"
sum(deck2$face == "ace")
deck2$value[deck2$face == "ace"]
deck3$value[deck3$face == "ace"] <- 14
deck3
deck4 <- deck
deck4$value <- 0
head(deck4, 13)
deck4$suit == "hearts"
deck4$value[deck4$suit == "hearts"]
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value[deck4$suit == "hearts"]
deck4[deck4$face == "queen", ]
deck4[deck4$suit == "spades", ]
deck4$face == "queen" & deck4$suit == "spades"
deck4[queenOfSpades, ]
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4[queenOfSpades, ]
deck4$values[queenOfSpades]
deck4$value[queenOfSpades]
deck5
deck5 <- deck
deck5
facecard <- deck5$face %in% c("king", "queen", "jack")
facecard
deck5[facecard, ]
deck5$value[facecard] <- 10
head(deck5, 13)
1 + NA
NA == 1
c(1, 2, NA) == c(1, 2, 3)
c(1, 2, 3, NA) == NA
NA == NA
is.na(c(1, 2, 3, NA))
which(is.na(vec))
vec <- c(1, 2, 3, NA)
is.na(vec)
which(is.na(vec))
deck5$value[deck$face == "ace"] <- NA
ls()
ar
rm(list = ls())
deck <- read.csv("../data/cards.csv", stringsAsFactors = FALSE)
deck2 <- deck
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec[c(1, 3, 5)] <- 1
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec[9] <- 0
vec
deck2$new <- 1:52
head(deck2)
deck2$new <- NULL
head(deck2)
deck2[seq(13, 52, by = 13), ]
deck <- read.csv("../data/cards.csv", stringsAsFactors = FALSE)
deck2 <- deck
deck <- read.csv("../data/cards.csv", stringsAsFactors = FALSE)
setwd("~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming/R")
deck <- read.csv("../data/cards.csv", stringsAsFactors = FALSE)
deck2 <- deck
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec[c(1, 3, 5)] <- 1
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec[9] <- 0
vec
deck2$new <- 1:52
head(deck2)
deck2$new <- NULL
head(deck2)
deck2[seq(13, 52, by = 13), ]
deck2[seq(13, 52, by = 13), 1]
deck2[seq(13, 52, by = 13), 1, drop = FALSE]
deck2$value[seq(13, 52, by = 13)]
deck2$value[seq(13, 52, by = 13)] <- 14
head(deck2, n = 13)
source("./shuffle.R")
deck3 <- shuffle(deck)
deck3
head(deck3)
vec
vec[c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)]
1 > 2
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
1 %in% c(3, 4, 5)
c(1, 2) %in% c(3, 4, 5)
c(1, 2, 3) %in% c(3, 4, 5)
c(1, 2, 3, 4) %in% c(3, 4, 5)
deck2$face == "ace"
sum(deck2$face == "ace")
deck2$value[deck2$face == "ace"]
deck3$value[deck3$face == "ace"] <- 14
deck3
deck4 <- deck
deck4$value <- 0
head(deck4, 13)
deck4$suit == "hearts"
deck4$value[deck4$suit == "hearts"]
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value[deck4$suit == "hearts"]
deck4[deck4$face == "queen", ]
deck4[deck4$suit == "spades", ]
a <- c(1, 2, 3)
b <- c(1, 2, 3)
c <- c(1, 2, 4)
a == b
b == c
a == b & b == c
deck4$face == "queen" & deck4$suit == "spades"
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4[queenOfSpades, ]
deck4$value[queenOfSpades]
deck5 <- deck
deck5
facecard <- deck5$face %in% c("king", "queen", "jack")
facecard
deck5[facecard, ]
deck5$value[facecard] <- 10
head(deck5, 13)
1 + NA
NA == 1
c(1, 2, NA) == c(1, 2, 3)
c(NA, 1:50)
mean(c(NA, 1:50))
mean(c(NA, 1:50), na.rm = TRUE)
NA == NA
c(1, 2, 3, NA) == NA
vec <- c(1, 2, 3, NA)
is.na(vec)
which(is.na(vec))
deck5$value[deck$face == "ace"] <- NA
rm(list = ls())
deck <- read.csv("../data/cards.csv", stringsAsFactors = FALSE)
deck2 <- deck
vec <- rep(0, 6)
vec[1]
vec[1] <- 1000
vec
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec[c(1, 3, 5)] <- 1
vec
vec[4:6] <- vec[4:6] + 1
vec
vec[7] <- 0
vec[9] <- 0
vec
deck2$new <- 1:52
head(deck2)
deck2$new <- NULL
head(deck2)
deck2[seq(13, 52, by = 13), ]
deck2[seq(13, 52, by = 13), 1]
deck2[seq(13, 52, by = 13), 1, drop = FALSE]
deck2$value[seq(13, 52, by = 13)]
deck2$value[seq(13, 52, by = 13)] <- 14
head(deck2, n = 13)
source("./shuffle.R")
deck3 <- shuffle(deck)
deck3
head(deck3)
vec
vec[c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)]
1 > 2
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
1 %in% c(3, 4, 5)
c(1, 2) %in% c(3, 4, 5)
c(1, 2, 3) %in% c(3, 4, 5)
c(1, 2, 3, 4) %in% c(3, 4, 5)
deck2$face == "ace"
sum(deck2$face == "ace")
deck2$value[deck2$face == "ace"]
deck3$value[deck3$face == "ace"] <- 14
deck3
deck4 <- deck
deck4$value <- 0
head(deck4, 13)
deck4$suit == "hearts"
deck4$value[deck4$suit == "hearts"]
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value[deck4$suit == "hearts"]
deck4[deck4$face == "queen", ]
deck4[deck4$suit == "spades", ]
a <- c(1, 2, 3)
b <- c(1, 2, 3)
c <- c(1, 2, 4)
a == b
b == c
a == b & b == c
deck4$face == "queen" & deck4$suit == "spades"
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
deck4[queenOfSpades, ]
deck4$value[queenOfSpades]
deck5 <- deck
deck5
facecard <- deck5$face %in% c("king", "queen", "jack")
facecard
deck5[facecard, ]
deck5$value[facecard] <- 10
head(deck5, 13)
1 + NA
NA == 1
c(1, 2, NA) == c(1, 2, 3)
c(NA, 1:50)
mean(c(NA, 1:50))
mean(c(NA, 1:50), na.rm = TRUE)
NA == NA
c(1, 2, 3, NA) == NA
vec <- c(1, 2, 3, NA)
is.na(vec)
which(is.na(vec))
deck5$value[deck$face == "ace"] <- NA
sink(file = "./output.txt")
read.csv("../data/cards.csv")
deck <- read.csv("../data/cards.csv")
str(deck)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
str(deck)
head(deck)
vec <- c(6, 1, 3, 6, 10, 5)
vec[1:3]
deck[1, 1]
deck[1, 1:3]
new <- deck[1, 1:3]
new
str(new)
str(deck[1, 1])
deck[1, 1, drop = FALSE]
str(deck[1, 1, drop = FALSE])
str(deck[1, 1:3])
deck[1:3, 1]
str(deck[1:3, 1])
deck[1:3, 1, drop = FALSE]
str(deck[1:3, 1, drop = FALSE])
deck[-1, 1:3]
deck[-(2:52), 1:3]
deck[1, ]
deck[ , 1]
deck[ , 1, drop = FALSE]
deck[1, c(TRUE, TRUE, FALSE)]
rows <- c(TRUE, rep(FALSE, 51))
deck[rows, ]
deck[1, c("face", "suit", "value")]
deck[ , "value"]
deck[, 3]
deck[, -(1:2)]
deck[, c(FALSE, FALSE, TRUE)]
deck[ , "value", drop = FALSE]
deal <- function(cards) {
cards[1, ]
}
deal(deck)
deck2 <- deck[1:52, ]
head(deck2)
deck2 <- deck[52:1, ]
head(deck2)
deck3 <- deck[c(2, 1, 3:52), ]
head(deck3)
deal(deck3)
random <- sample(1:52, size = 52)
random
deck4 <- deck[random, ]
head(deck4)
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(deck)
deck2 <- shuffle(deck)
deal(deck2)
str(deck)
deck$value
mean(deck$value)
median(deck$value)
lst <- list(numbers = c(1, 2),
logical = TRUE,
strings = c("a", "b", "c"))
lst[1]
lst$numbers
lst[[1]]
lst["numbers"]
lst[["numbers"]]
dump(list = c("deal", "shuffle"), file = "shuffle.R")
save.image(file = "./r_notation.RData")
sink()
source('~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming/R/R_Notation.R', echo=TRUE)
# R Notation
## read.csv
sink(file = "../docs/output.txt")
read.csv("../data/cards.csv")
deck <- read.csv("../data/cards.csv")
str(deck)
deck <- read.csv("../data/cards.csv",
stringsAsFactors = FALSE)
str(deck)
head(deck)
## Positive Integers
vec <- c(6, 1, 3, 6, 10, 5)
vec[1:3]
deck[1, 1]
deck[1, 1:3]
new <- deck[1, 1:3]
new
str(new)
str(deck[1, 1])
deck[1, 1, drop = FALSE]
str(deck[1, 1, drop = FALSE])
str(deck[1, 1:3])
deck[1:3, 1]
str(deck[1:3, 1])
deck[1:3, 1, drop = FALSE]
str(deck[1:3, 1, drop = FALSE])
## Negative Integers
deck[-1, 1:3]
deck[-(2:52), 1:3]
## Blank Spaces
deck[1, ]
deck[ , 1]
deck[ , 1, drop = FALSE]
## Logical Values
deck[1, c(TRUE, TRUE, FALSE)]
rows <- c(TRUE, rep(FALSE, 51))
deck[rows, ]
## Names
deck[1, c("face", "suit", "value")]
deck[ , "value"]
deck[, 3]
deck[, -(1:2)]
deck[, c(FALSE, FALSE, TRUE)]
deck[ , "value", drop = FALSE]
deal <- function(cards) {
cards[1, ]
}
deal(deck)
deck2 <- deck[1:52, ]
head(deck2)
deck2 <- deck[52:1, ]
head(deck2)
deck3 <- deck[c(2, 1, 3:52), ]
head(deck3)
deal(deck3)
#set.seed(1)
random <- sample(1:52, size = 52)
random
deck4 <- deck[random, ]
head(deck4)
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(deck)
deck2 <- shuffle(deck)
deal(deck2)
## Dollar Signs and Double Brackets
str(deck)
deck$value
mean(deck$value)
median(deck$value)
lst <- list(numbers = c(1, 2),
logical = TRUE,
strings = c("a", "b", "c"))
lst[1]
lst$numbers
lst[[1]]
lst["numbers"]
lst[["numbers"]]
dump(list = c("deal", "shuffle"), file = "shuffle.R")
save.image(file = "./r_notation.RData")
sink()
library(pryr)
install.packages("pryr")
library(pryr)
parenvs()
parenvs(all = TRUE)
?parenvcs
?parenvs
as.environment("package:stats")
help(package = "pryr")
globalenv()
baseenv()
emptyenv()
parent.env(globalenv())
parent.env(emptyenv())
ls(emptyenv())
ls(globalenv())
head(globalenv()$deck, 3)
?assign
assign("new", "Hello Global", envir = globalenv())
ls()
globalenv()$new
environment()
new
new <- "Hello Active"
new
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
?environment
environment(show_env)
environment(crimtab)
environment(c)
environment(hist)
environment(show_env)
environment(parenvs)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
fix(show_env())
fix(show_env
fix(show_env)
foo <- "take me to your runtime"
fix(show_env)
show_env()
rm("foo")
ls()
fix(show_env)
show_env()
source("./R/shuffle.R")
ls()
deal
deal2 <- function(){
deck[1, ]
}
deal2()
environment(deal2)
head(deck, n = 3)
DECK <- deck
deck <- deck[-1, ]
head(deck, n = 3)
deal3 <- function(){
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal3()
deck
card
deal4()
deal4 <- function(){
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal4()
head(deck, 6)
deal4()
head(deck, 6)
deal4()
head(deck, 6)
shuffle
head(deck, 3)
a <- shuffle(deck)
head(deck, 3)
ehad(a, 3)
head(a, 3)
ls()
shuffle2 <- function{
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle2 <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle2()
head(DECK)
shuffle2()
DECK
deck
shuffle()
shuffle2()
deal()
deal4()
setup <- function(deck) {
DECK <- deck
DEAL <- function(){
card <- DECK[1, ]
assign("deck", DECK[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52)
assign("deck", DECK[random, ], envir = globalenv())
}
setup()
ls()
setwd("~/Google 드라이브/Works/Class/Data_Science/R.WD/r_programming/R")
