expand.grid(1:2, 1:2, 1:2)
rolls$value <- rolls$Var1 + rolls$Var2
head(rolls, 3)
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
prob
rolls$Var1
prob[rolls$Var1]
rolls$prob1 <- prob[rolls$Var1]
rolls$prob2 <- prob[rolls$Var2]
rolls
rolls$prob <- rolls$prob1 * rolls$prob2
rolls
sum(rolls$value * rolls$prob)
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
prob <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
combos$prob1 <- prob[combos$Var1]
combos
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
head(combos, 3)
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)
sum(combos$prob)
symbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])
score(symbols)
for (value in c("My", "First", "for", "loop")) {
print("one run")
}
value
for (value in c("My", "First", "for", "loop")) {
print(value)
}
for (word in c("My", "First", "for", "loop")) {
print(word)
}
for (string in c("My", "First", "for", "loop")) {
print(string)
}
for (i in c("My", "First", "for", "loop")) {
print(i)
}
for (value in c("My", "First", "for", "loop")) {
value
}
chars <- as.character()
chars
words <- c("My", "First", "for", "loop")
for (i in 1:4) {
chars[i] <- words[i]
}
chars
combos$prize <- NA
head(combos, 3)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
score(c("BB", "DD", "B"))
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
save.image(file = "./Loops.RData")
rm(list = ls())
abs_loop <- function(vec) {
for (i in 1:length(vec)) {
if (vec[i] < 0) {
vec[i] <- -vec[i]
}
vec
}
abs_set <- function(vec) {
negs <- vec < 0
vec[negs] <- vec[negs] * -1
vec
}
long <- rep(c(-1, 1), 5000000)
system.time(abs_loop(long))
system.time(abs_set(long))
system.time(abs(long))
vec <- 1:10 * rep(c(1, -1), 5)
vec
vec < 0
vec[vec < 0]
vec[vec < 0] * -1
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
many <- rep(vec, 1000000)
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
change_vec <- function(vec) {
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_vec(many))
change_vec2 <- function(vec) {
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen", "BB" = "jack",
"BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
change_vec2(vec)
system.time(change_vec2(many))
system.time(
{
output <- rep(NA, 1000000)
for (i in 1:1000000)
{
output[i] <- i + 1
}
)
system.time(
{
output <- NA
for (i in 1:1000000)
{
output[i] < i + 1
}
)
load("./Loops.RData")
play
winnings <- vector(length = 1000000)
for (i in 1:1000000) {
winnings[i] <- play()
}
mean(winnings)
ls()
play
play1
play2
play()
play
score(ge_symbols())
score(get_symbols())
get_symbols
load("./S3.RData")
die <- 1:6
rolls <- expand.grid(die, die)
rolls
expand.grid(1:2, 1:2, 1:2)
rolls$value <- rolls$Var1 + rolls$Var2
head(rolls, 3)
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
prob
rolls$Var1
prob[rolls$Var1]
rolls$prob1 <- prob[rolls$Var1]
rolls$prob2 <- prob[rolls$Var2]
rolls
rolls$prob <- rolls$prob1 * rolls$prob2
rolls
sum(rolls$value * rolls$prob)
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
prob <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
combos$prob1 <- prob[combos$Var1]
combos
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
head(combos, 3)
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)
sum(combos$prob)
symbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])
score(symbols)
for (value in c("My", "First", "for", "loop")) {
print("one run")
}
value
for (value in c("My", "First", "for", "loop")) {
print(value)
}
for (word in c("My", "First", "for", "loop")) {
print(word)
}
for (string in c("My", "First", "for", "loop")) {
print(string)
}
for (i in c("My", "First", "for", "loop")) {
print(i)
}
for (value in c("My", "First", "for", "loop")) {
value
}
chars <- as.character()
chars
words <- c("My", "First", "for", "loop")
for (i in 1:4) {
chars[i] <- words[i]
}
chars
combos$prize <- NA
head(combos, 3)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
score(c("BB", "DD", "B"))
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
save.image(file = "./Loops.RData")
abs_loop <- function(vec) {
for (i in 1:length(vec)) {
if (vec[i] < 0) {
vec[i] <- -vec[i]
}
vec
}
abs_set <- function(vec) {
negs <- vec < 0
vec[negs] <- vec[negs] * -1
vec
}
long <- rep(c(-1, 1), 5000000)
system.time(abs_loop(long))
system.time(abs_set(long))
system.time(abs(long))
vec <- 1:10 * rep(c(1, -1), 5)
vec
vec < 0
vec[vec < 0]
vec[vec < 0] * -1
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
many <- rep(vec, 1000000)
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
change_vec <- function(vec) {
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_vec(many))
change_vec2 <- function(vec) {
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen", "BB" = "jack",
"BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
change_vec2(vec)
system.time(change_vec2(many))
system.time(
{
output <- rep(NA, 1000000)
for (i in 1:1000000)
{
output[i] <- i + 1
}
)
system.time(
{
output <- NA
for (i in 1:1000000)
{
output[i] < i + 1
}
)
load("./Loops.RData")
play
winnings <- vector(length = 1000000)
for (i in 1:1000000) {
winnings[i] <- play()
}
mean(winnings)
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
system.time({
for (i in 1:1000000) {
winnings[i] <- play()
}
})
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
ge_many_symbols(5)
get_many_symbols(5)
symbols <- get_many_symbols(5)
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols
symbols <- get_many_symbols(10)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(10)
symbols
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
symbols <- get_many_symbols(20)
symbols
rowSums(symbols == "C")
rowSums(symbols == "DD")
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
cherries + diamonds
!cherries
cherries
?unique
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2s)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds -----
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (Cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contains three of a kind
same <- symbols[, 1] == symbols[, 2] & symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars -----
bars <- symbols == "B" | symbols == "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] & symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] & symbols[, 2] != symbols[, 3]
### Treat as a three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamon in combo ----
unname(prize * 2^diamonds)
}
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(w1 = symb_mat[, 1], w2 = symb_mat[, 2], w3 = symb_mat[, 3],
prize = score_many(symb_mat))
}
system.time(play_may(1000000))
system.time(play_many(1000000))
ls()
